---
Language:        Cpp
# Out of all supported styles, LLVM seems closest to our own.
BasedOnStyle:    LLVM

################
#
# Deviations from LLVM's style.
#
################

# We prefer an indentation width of 4 columns; LLVM likes 2.
## OVERRIDE FOR COMPARISON
IndentWidth:     2

# We prefer 79; llvm likes 80.
ColumnLimit: 79

# Where do we want to put backslashes on multiline macros?  Our choices are
# "as far left as possible", "as far right as possible", and "make no changes."
# LLVM defaults to right, but we don't dig that.
AlignEscapedNewlines: Left

# When we see a bunch of things in a row with comments after them, should we
# try to align those comments?  Doing so makes some of our code pretty ugly.
AlignTrailingComments: false

# We use a function declaration style much closer to BSD KNF than to LLVM's.
# We say:
#      int foo(int x);
#      int
#      foo(int x)
#      {
#          ...
#      }
# whereas llvm prefers:
#      int foo(int x);
#      int foo(int x) {
#          ...
#      }
# or even:
#      int foo(int x) { ... }
#
BreakBeforeBraces: Custom
BraceWrapping:
  AfterFunction:   true
AllowShortFunctionsOnASingleLine: None
AlwaysBreakAfterReturnType: AllDefinitions

# We like to have case labeled indented an extra level.
#
IndentCaseLabels: true

# We don't like blocks to start with an empty line.
#
KeepEmptyLinesAtTheStartOfBlocks: false

################
#
# Tor-specific magic
#
################

#
# These comments are magical, and should not be changed.
#
CommentPragmas:  'LCOV_EXCL|COVERITY'

#
# These introduce an iteration, and work a bit like a for loop.
#
ForEachMacros:
  - MAP_FOREACH
  - MAP_FOREACH_MODIFY
  - TOR_SIMPLEQ_FOREACH_SAFE

#
# This explains how to sort our headers.
#
# This is more complex than it truly should be, but I've edited this till
# compilation still passes.
#
IncludeCategories:
  - Regex:           '^"orconfig.h'
    Priority:        -30
  - Regex:           '^"lib/(cc|defs|subsys|testsupport|version)/'
    Priority:        -20
  - Regex:           '^"lib/(arch|conf|err)/'
    Priority:        -19
  - Regex:           '^"ext/'
    Priority:        -18
  - Regex:           '^"lib/(fdio|intmath|malloc)/'
    Priority:        -17
  - Regex:           '^"lib/(timeouts|ctime|lock)/'
    Priority:        -16
  - Regex:           '^"lib/string/'
    Priority:        -15
  - Regex:           '^"lib/(osinfo|smartlist_core/wallclock)/'
    Priority:        -14
  - Regex:           '^"lib/'
    Priority:        -10
  - Regex:           '^"core/or/or.h'
    Priority:        -5
  - Regex:           '(or_options_st.h|config.h)' # XXXX
    Priority:        -4
  - Regex:           '^"core/'
    Priority:        5
  - Regex:           '^"feature/'
    Priority:        10
  - Regex:           '^"app/'
    Priority:        20

#
# These macros should always cause indentation, as though they were { and }.
#
MacroBlockBegin: 'STMT_BEGIN'
MacroBlockEnd:   'STMT_END'

#
# These macros don't need to have semicolons afterwards.
#
StatementMacros:
   - HT_PROTOTYPE
   - HT_GENERATE
   - HT_GENERATE2

#
# These macros are interpreted as types.
# (Not supported in my clang-format)
#
# TypenameMacros:
#     - "STACK_OF"

...
