/* Copyright (c) 2001, Matej Pfajfar.
 * Copyright (c) 2001-2004, Roger Dingledine.
 * Copyright (c) 2004-2006, Roger Dingledine, Nick Mathewson.
 * Copyright (c) 2007-2018, The Tor Project, Inc. */
/* See LICENSE for licensing information */

#ifndef TOR_DISPATCH_MSGTYPES_H
#define TOR_DISPATCH_MSGTYPES_H

#include <stdint.h>
#include <stddef.h>

/**
 * These types are aliases for subsystems, channels, and message IDs.
 **/
typedef uint16_t subsys_id_t;
typedef uint16_t channel_id_t;
typedef uint16_t message_id_t;

/**
 * This identifies a C type that can be sent along with a message.
 **/
typedef uint16_t msg_type_id_t;

#define ERROR_ID 65535

/**
 * Auxiliary (untyped) data sent along with a message.
 **/
typedef union {
  void *ptr;
  uint64_t u64;
} msg_aux_data_t;

/** Flag for registering a message: declare that no other module is allowed to
 * publish this message if we are publishing it, or subscribe to it if we are
 * subscribing to it. */
#define DISP_FLAG_EXCL (1u<<0)

/** Flag for registering a message: declare that this message is a stub, and we
 * will not actually publish/subscribe it, but that the dispatcher should
 * treat us as if we did when typechecking.
 *
 * We use this so that messages aren't treated as "dangling" if they are
 * potentially used by some other build of Tor.
 */
#define DISP_FLAG_STUB (1u<<1)

/**
 * Structure of a received message.
 **/
typedef struct msg_t {
  subsys_id_t sender;
  channel_id_t channel;
  message_id_t msg;
  /** We could omit this field, since it is implicit in the message, but
   * IMO let's leave it in for safety. */
  msg_type_id_t type;
  /** Untyped auxiliary data. You shouldn't have to mess with this
   * directly. */
  msg_aux_data_t aux_data__;
} msg_t;

struct dispatcher_t;

/** A pub_binding_t is an opaque object that subsystems use to publish
 * mesages. */
typedef struct pub_binding_t {
  struct dispatcher_t *dispatch_ptr;
  msg_t msg_template;
} pub_binding_t;

/**
 * A "dispatch connector" is a view of the dispatcher that a subsystem
 * uses while initializing itself.  It is specific to the subsystem, and
 * ensures that each subsystem doesn't need to identify itself
 * repeatedly while registering its messages.
 **/
typedef struct dispatch_connector_t dispatch_connector_t;

/**
 * A function that a subscriber uses to receive a message.  In practice, this
 * function will be generated by a macro that converts the argument to
 * the correct type before passing it to the real handler.
 **/
typedef void (*recv_fn_t)(const msg_t *m);

/**
 * Table of functions to use for a given C type.  Any omitted functions will
 * be treated as no-ops.
 **/
typedef struct dispatch_typefns_t {
  /** Release storage held for */
  void (*free_fn)(msg_aux_data_t);
  char *(*fmt_fn)(msg_aux_data_t);
} dispatch_typefns_t;

/**
 * Function callback type used to alert some other module when a channel's
 * queue changes from empty to nonempty.
 **/
typedef void (*dispatch_alertfn_t)(struct dispatcher_t *,
                                   channel_id_t, void *);

#endif
